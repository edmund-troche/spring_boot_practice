/*
 * Copyright 2018 Edmund Troche
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
group = 'org.troche.spring'

apply plugin: 'application'
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'org.springframework.boot'

defaultTasks 'build'

version = new Version(major: 0, minor: 8, patch: 0)

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:' + springBootVersion)
	}
}

mainClassName = 'org.troche.spring.application.exercise.Application'

checkstyle {
	toolVersion "7.6.1"
}

tasks.withType(Checkstyle) {
    exclude '**/src/test/**'
}

jacocoTestReport {
    group = 'Reporting'
    reports {
        xml.enabled true
        csv.enabled true
        html.destination "${buildDir}/reports/coverage"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.troche.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
     compile('ch.qos.logback:logback-core')
     compile('net.logstash.logback:logstash-logback-encoder:4.6')

    // Use Jetty instead of Tomcat
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile('org.springframework.boot:spring-boot-starter-jetty')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-test')
    compile('org.aspectj:aspectjweaver:1.8.8')
    compile('junit:junit:4.12')

    //testCompile('org.jmockit:jmockit:1.38')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('junit:junit:4.12')
}

sourceSets {
    test {
        java {
            srcDir 'test'
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
}

jar {
    baseName = 'spring-exercise'
    version = version
}

class Version {
    int major, minor, patch = 0

    String toString() {
        "$major.$minor.$patch"
    }
}
